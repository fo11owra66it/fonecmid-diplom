
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ,Режим)
	
	// Проверка договора
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ВидДоговора, ВКМ_ДатаНачала, ВКМ_ДатаОкончания, ВКМ_СуммаАбонентскойПлаты, ВКМ_СтимостьЧаса");
	
	// Проверка на вид договора
	Если Не ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для данного вида обслуживания должен быть выбран договор абонентского обслуживания";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Проверка документа на то, что дата проведения работ должна находится в периоде действия договора
	Если НачалоДня(ДанныеДоговора.ВКМ_ДатаНачала) > НачалоДня(ДатаПроведенияРабот) 
			Или НачалоДня(ДанныеДоговора.ВКМ_ДатаОкончания) < НачалоДня(ДатаПроведенияРабот) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Дата проведения работ должна находится в периоде действия договора";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// регистр ВКМ_ВыполненныеКлиентуРаботы
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
	Движение.Период = ДатаПроведенияРабот;
	Движение.Клиент = Клиент;
	Движение.Договор = Договор;
	
	// 
	КоличествоЧасовКОплате = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");
	
	Движение.КоличествоЧасов = КоличествоЧасовКОплате;
	Движение.СуммаКОплате = КоличествоЧасовКОплате * ДанныеДоговора.ВКМ_СтимостьЧаса;

	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора, внесенные вручную данные будут утеряны!
	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецЕсли
