
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ,Режим)
	
	// Проверка договора
	ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "ВидДоговора, ВКМ_ДатаНачала, ВКМ_ДатаОкончания, ВКМ_СуммаАбонентскойПлаты, ВКМ_СтимостьЧаса");
	
	// Проверка на вид договора
	Если Не ДанныеДоговора.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ВКМ_АбоненскоеОбслуживание Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Для данного вида обслуживания должен быть выбран договор абонентского обслуживания";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Проверка документа на то, что дата проведения работ должна находится в периоде действия договора
	Если НачалоДня(ДанныеДоговора.ВКМ_ДатаНачала) > НачалоДня(ДатаПроведенияРабот) 
			Или НачалоДня(ДанныеДоговора.ВКМ_ДатаОкончания) < НачалоДня(ДатаПроведенияРабот) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Дата проведения работ должна находится в периоде действия договора";
		Сообщение.Сообщить();
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// регистр ВКМ_ВыполненныеКлиентуРаботы
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
	Движение.Период = Дата;
	Движение.Клиент = Клиент;
	Движение.Договор = Договор;
	Движение.КоличествоЧасов = ВыполненныеРаботы.Итог("ЧасыКОплатеКлиенту");;
	Движение.СуммаКОплате = Движение.КоличествоЧасов * ДанныеДоговора.ВКМ_СтимостьЧаса;

	//{{__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
	//Данный фрагмент построен конструктором.
	//При повторном использовании конструктора, внесенные вручную данные будут утеряны!
	
	//}}__КОНСТРУКТОР_ДВИЖЕНИЙ_РЕГИСТРОВ
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		Текст = СтрШаблон("Содана новая заявка № %1: Специалист %2, Дата проведения работ %3, Время начала %4, Время окнчания %5",
							Номер, Специалист, ДатаПроведенияРабот, ВремяНачалаРабот, ВремяОкончанияРабот);
		НовыйЭлемент = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
		НовыйЭлемент.Текст = Текст;
		НовыйЭлемент.Записать();
		
	КонецЕсли;
	
	Если Не ЭтоНовый() Тогда
		
		СписокИзменений = Новый Массив;
		
		ПроверитьИзменениеДокумента(Ссылка, СписокИзменений);
		
		Если СписокИзменений.Количество() = 0 Тогда
			Возврат;
		Иначе
			Текст = СтрШаблон("Заявка № %1. Изменено: %2.", Номер, СтрСоединить(СписокИзменений, ", "));
			НовыйЭлемент = Справочники.ВКМ_УведомленияТелеграмБоту.СоздатьЭлемент();
			НовыйЭлемент.Текст = Текст;
			НовыйЭлемент.Записать();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьИзменениеДокумента(Документ, МассивИзменений)
	
	Выборка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Специалист, ДатаПроведенияРабот, ВремяНачалаРабот, ВремяОкончанияРабот");    
	
	Если Не Выборка.Специалист = Специалист Тогда
		МассивИзменений.Добавить(СтрШаблон("Специалист с %1 на %2", Выборка.Специалист, Специалист));
	КонецЕсли;
	
	Если Не Выборка.ДатаПроведенияРабот = ДатаПроведенияРабот Тогда
		МассивИзменений.Добавить(СтрШаблон("Дата проведения работ с %1 на %2", Выборка.ДатаПроведенияРабот, ДатаПроведенияРабот));
	КонецЕсли;
	
	Если Не Выборка.ВремяНачалаРабот = ВремяНачалаРабот Тогда
		МассивИзменений.Добавить(СтрШаблон("Время начала работ с %1 на %2", Формат(Выборка.ВремяНачалаРабот, "ДЛФ=T;"), Формат(ВремяНачалаРабот, "ДЛФ=T;")));
	КонецЕсли;
	
	Если Не Выборка.ВремяОкончанияРабот = ВремяОкончанияРабот Тогда
		МассивИзменений.Добавить(СтрШаблон("Время окончания работ с %1 на %2", Формат(Выборка.ВремяОкончанияРабот, "ДЛФ=T;"), Формат(ВремяОкончанияРабот, "ДЛФ=T;")));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
